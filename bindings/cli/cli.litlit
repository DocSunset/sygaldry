# Motivation

Especially while debugging, testing, or prototyping, the easiest available
interface to interact with a device is often a text-based console. It is
generally easier to spit ASCII across a serial interface than to work with USB,
Bluetooth, Wi-Fi, Ethernet, or any other transmission protocol, both in terms
of setting up the hardware, and connecting to it from a PC. A text-based
console can also be used as a test environment when embedded hardware
processors are not involved. For these reasons, one of the first bindings to be
implemented is (TODO: was) a command line interface.

# Design Reasoning

What we would like to achieve is for the endpoints of a simple processor, or
multiple such processors, e.g. the components of the one-bit bongo described in
another directory of the project, to have their endpoints exposed over a
text-based command line interface. 

## Portability

We would like the code that implements this binding to reflect generically over
the endpoints of the device without having to explicitly name them in source
code, so that the binding can readily adapt to arbitrary processors. We would
like the binding to work with minimal repetition when running the processor in
a simulated environment, where all input and output come through the command
line, and when running it as a hardware device, where some inputs and outputs
are generated by external hardware events, and where the command line is
physically realized across a serial port interface. Eventually, other
interfaces for command-line interaction are easy to imagine, such as a
web-based command line for advanced debugging.

## Basic Functionality

We would like to be able to query the current value of an endpoint, and set the
value of destination endpoints. For instance, we might issue the command `get
Button-Edge-Detector button-state` and receive the response `true` or `false`.
We could change the button state by issuing the command `set
Button-Edge-Detector button-state true`. For testing and debugging, we would
like to be able to trigger execution of a device's processing, e.g. by
issuing the command `trigger Button-Edge-Detector`.

We would like to be able to query the metadata of a device and its endoints:

```sh
> describe Button-Gesture-Model
inputs:
    button-state: bool
    # etc.
outputs:
    rising-edge: bool
    falling-edge: bool
    any-edge: bool
    # etc.
```

We would like to be able to get a list of all the devices that can be
interacted with by the command line interface:

```sh
> list
gpio-pin
button-gesture-model
# etc.
```

And finally, we would like to be able to get a list of all the CLI commands:

```sh
> help
# @='help text'
list
    Get a list of devices.
describe <device>
    Print the metadata associated with a device
get <device> <endpoint>
    Print the current state of an endpoint
set <device> <endpoint> <value>
    Change the current state of an endpoint
trigger <device>
    Run a device's process
help
    Print a helpful list of commands
# @/
```

## Commands

### Commands as Shell Programs

For maximum portability, it seems likely that a character-by-character approach
will provide the easiest adaptability to different environments. The most obvious
approach to me is to accumulate characters until a full line of input is collected
(or the buffer overflows), and then tokenize that line of input and attempt to
match it to known commands. If a match is found, then control can flow to that
command, passing the whole command line as input to it.

So I am imagining a pipeline roughly like this:

```
accumulate inputs(character)
    buffer[write_position++] = character
    if character == '\n'
        parse line
        write_position = 0
    else if write_position == buffer size
        complain about buffer overflow
        write_position = 0

parse line(line)
    command = get_first_token()
    switch (command)
        execute command with line as input
```

Notice that the commands are effectively self contained programs. In principle,
each command could do almost anything. Given this, we may wish to adopt a familiar
convention for the interface to a command. We can imagine, for instance, the
following abstract base class for all commands:

```c++
struct ShellProgram
{
    virtual int main(int argc, char ** argv) = 0;
};
```

This implies that we are treating our CLI like an OS shell, and our CLI
commands as executable programs. This analogy is a bit strained under the
actual expected environment, where the commands are compiled into the CLI,
which runs as a binding in the firmware of a digital musical instrument. This
is a far cry from the shell of an OS, where the commands are separately
compiled programs in the path of the shell. For one thing, our `ShellProgram`s
can't reasonably assume that there are any common OS facilities available, like
`printf` or `std::cout`, which would normally be included by a shell program's
source code and linked to a static library on the system.

### Printing Through Ports

With respect to our main target environment (i.e. firmware) and its
constraints, our CLI commands might more reasonably adopt an interface that
acknowledges the requirements we're trying to address. We only need our CLI
commands to interact with the bound devices, to parse their command-specific
CLI arguments, and to write text to the serial output. We should also try not
to get ahead of ourselves. Our immediate need is a simple CLI for basic
debugging and testing purposes. It would be inappropriate to start building a
general-purpose shell scripting environment at this point. It's tempting to
try to develop a `ShellProgram` API that is independent of this basic CLI,
but to do so would be premature at this time.

At the same time, some of the facilities we develop here may be useful across
other devices. Many devices, like our CLI commands, may require some way of
outputting errors, error messages, and other text logs. We might consider
treating these as `outputs` in the same way we treat other output signals:

```c++
struct CliCommand
{
    static consteval auto name() { return "Example Command"; }

    struct outputs_t
    {
        struct stdout_t
        {
            static consteval auto name() { return "standard text output"; }
            const char * value;
        } stdout;
    } outputs;

    void main(int argc, char ** argv); // return code is now an output port
};
```

The main problem with this approach is that the memory for string-type outputs
needs to be managed somehow, even though in principle there should be no real
need to store whole messages. In an embedded context, bytes can most likely
be sent more or less as needed, and buffering should in any case be handled by
the serial interface's drivers, not the device sending the message. In an
environment with an operating system, the OS should handle buffering of messages.
In general, the device is not well suited to deal with this concern.

One approach might be to side step the memory management issue by generating the
messages at compile time. While this might work well enough in case of a device
running on a PC, where program memory is abundant, the resulting duplication
of strings is likely not tolerable in many embedded systems. For instance, if the
message for the `list` command were statically generated at compile time, it
would result in the duplication of the names of every device bound to the CLI.
This kind of duplication would very likely add up quickly until it starts to
crowd out more important functionality.

### Printing Through Feature Injection

What is needed is a way to pass in a function that can accept a string and
immediately print it or buffer it for printing with the appropriate driver. In
the current version of [Avendish](github.com/celtera/avendish) at the time of
writing, this is accomplished through a dependency injection mechanism where
the device in need of logging functionality accepts a template parameter that
provides a logger. This seems like possibly the only reasonable approach.
Effectively, the only way to explicitly pass the thread of execution from one
place to another is through a function call. So here are some of the options

- the device author includes the function(s) for printing
- the device user subclasses the device and overrides the printing method(s)
- the device accepts a callback function pointer or pointer to class that is called on for printing
- the printing function or class is passed as a template parameter

In all cases, the device author and binding author are forced to agree on a
convention for the printing calls. There's no getting around that. In the first
case, the hardware specific printer is determined at link time; we would prefer
to make this choice explicit in source code. In the second case, an abundance
of near-identical subclassing is likely to abound, as the binding author
subclasses every device to work with every feature that needs to be
injected--quadratic glue code in other words, and we are not willing to accept
that. A class pointer could work; the device author would include an abstract
base class, and then the binding author can provide subclasses for each
hardware specific driver. There's no glue code, but this approach inextricably
links the device implementation to that abstract base, which becomes pulled in
as an explicit physical dependency of the device. This is a level of
frameworkization that we would prefer to avoid. A function callback could work,
except it would require the device author to match all material for printing to
one function call signature, e.g. `void (*print)(char * str)`. This means that
the responsibility for converting any data that needs to be printed into a
`char * str` falls on the device author. We would prefer for them to be able to
focus on writing their device without having to think about string formatting
conversions.

All that's left (unless I've forgotten something) is the template parameter.
This is only very slightly better than a pointer to a class. In both cases, the
device author admits a dependency on the call signature requirements of the
printer. The template parameter option has these main advantages: the
dependency is implicit, meaning that it is simpler for binding authors to meet
the requirements without modifying the device's implementation, and the device
and binding implementations aren't required to share any source code; the
injection of the feature imposes no runtime cost, since the full signature of
the printer and device are both known at compile time, so there's no
indirection through a base class; compile time injection also enables stronger
type checking, and potentially allows the binding author to enable optimization
through compile-time programming and template metaprogramming, if applicable.
The cost is likely in compilation time, since the device code has to be
recompiled for every different printer. However, in this context that cost is
negligible, since we're already committed to recompiling our devices for each
new binding.

The design of the printer is sufficiently involved that it is addressed in
its own directory.

### Summary

So we have moved from considering our CLI commands as general purpose shell
programs, to restricting that view to see them as mere text outputters, to once
again broadening our view to see them as general purpose
reflectable-aggregate-type devices with textual output ports, to recognizing
that text output requires feature injection, preferably through a template
parameter, to avoid glue code, forcing explicit dependencies on the device, and
added runtime costs. This leads to the following plan, demonstrated with a
simple `echo` command, for the commands' general interface, borrowing the
conceptual design of the logger feature injection scheme from Avendish:

```c++
// @+'test commands'
template<typename Config>
struct Echo
{
    static consteval auto name() { return "echo"; }
    static consteval auto description() { return "Repeats its arguments, separated by spaces, to the output"; }

    [[no_unique_address]] typename Config::basic_logger_type log; 

    template<typename ... Devices>
    int main(int argc, char ** argv, std::tuple<Devices...>&)
    {
        for (int i = 1; i < argc; ++i)
        {
            log.print(argv[i]);
            if (i + 1 < argc) log.print(" ");
        }
        log.println();
        return 0;
    };
};
// @/
```

# CLI

As described above, the CLI provides a fairly limited amount of behavior. It's
main role is to simply accumulate inputs until a full line is available,
try match the first token in the line to a command, and execute it if a match
is found.

## Tests

We'll define a function to facilitate testing, inspired by chatGPT's failed
attempt to generate tests for me, that accepts a string as input to the CLI and
returns a string representing whatever the CLI prints in response. We also
define some test devices and a configuration.

```c++
// @='cli test wrapper'
template <typename Cli>
string cli_process_input(Cli& cli, string input)
{
    cli.log.put.ss.str("");
    for (char c : input)
        cli.process(c);
    return cli.log.put.ss.str();
}
// @/

// @='test devices'
struct Device1 {
    static consteval auto name() { return "Test Device 1"; }
};

struct Device2 {
    static consteval auto name() { return "Test Device 2"; }
};
// @/

// @='test config class'
struct Config
{
    using basic_logger_type = sygaldry::bindings::basic_logger::TestLogger;
};
// @/

```

We can then test the CLI using a few trivial commands, such as the `echo` command
defined above, and the following:

```c++
// @+'test commands'
template<typename Config>
struct HelloWorld
{
    static consteval auto name() { return "hello"; }
    static consteval auto description() { return "Say's 'Hello world!' Useful for testing the CLI"; }

    [[no_unique_address]] typename Config::basic_logger_type log; 

    template<typename ... Devices>
    int main(int argc, char ** argv, std::tuple<Devices...>&)
    {
        log.println("Hello world!");
        return 0;
    };
};
// @/

// @+'tests'
TEST_CASE("CLI", "[bindings][cli]")
{
    auto devices = std::make_shared<std::tuple<Device1, Device2>>();
    auto cli = _Cli<Config, decltype(devices), HelloWorld, Echo>(devices);

    @{cli tests}
    SECTION("Hello world")
    {
        REQUIRE(cli_process_input(cli, "hello\n") == "Hello world!\n> ");
    }

    SECTION("Echo")
    {
        REQUIRE(cli_process_input(cli, "echo foo bar baz\n") == "foo bar baz\n> ");
    }
}
// @/
```

## Implementation

### Buffers

We'll statically allocate some buffers as class member variables to hold the
incoming characters, a count of tokens found, and pointers to the beginnings
of the tokens. For now, the size of the buffers is determined heuristically.
Ideally we should iterate over the commands at compile time and determine
exactly how big these buffers need to be, but this is left as future work
for now:

```c++
// @='cli buffers'
static constexpr size_t MAX_ARGS = 5;
static constexpr size_t BUFFER_SIZE = 128;
int argc = 0;
char * argv[MAX_ARGS];
unsigned char write_pos = 0;
char buffer[BUFFER_SIZE];
// @/
```

### Process loop

With these resources, we can outline the process function. The plan is to
keep track of the onset of arguments in `argv`, and to convert whitespace
to null characters so that the arguments are automatically null terminated.

When we reach the end of the line, we try to match the first argument to
a command, and reset the buffers. We also reset the buffers if either one
overflows.

```c++
// @='cli process'
if (_is_whitespace(c))
    buffer[write_pos++] = 0;
else
{
    buffer[write_pos] = c;
    if (_new_arg())
        argv[argc++] = &buffer[write_pos];
    write_pos++;
}

if (c == '\n')
{
    auto retcode = _try_to_match_and_execute();
    if (retcode != 0) _complain_about_command_failure(retcode);
    _reset();
}

if (_overflow())
{
    log.println("CLI line buffer overflow!");
    _reset();
}
// @/
```

### Match and execute

At the end of each line, we compare the first argument to the names of all the
available commands, and execute the first match. If it returns a non-zero error
code, we print a message. Then, regardless of the command's exit status, we
print a new prompt and return to the normal process loop. We assume that the
commands are stored as a tuple. Because we need to short-circuit the iteration
in case we find a matching command, the only adequate method for iterating over
the commands is using a recursive variadic function. This can't be a lambda,
since it's obnoxious to try to `std::apply` a tuple to a lambda that has to
recursively call itself. Instead, we define a template member function for the
purpose. We need to avoid calling this function if we don't have any commands.
We also have to deal with the special case where the requested command is
`help`. This command is deemed always available, and has to be matched and
executed seperately because it needs to be passed commands instead of devices.

```c++
// @+'cli implementation details'
template<typename Cmd, typename ... Cmds>
int _try_to_match_and_execute_impl(Cmd&& command, Cmds&&... cmds)
{
    if (std::string_view(argv[0]) == std::string_view(command.name()))
    {
        return command.main(argc, argv, *devices);
    }
    else if constexpr (sizeof...(Cmds) == 0)
        return 127;
    else
        return _try_to_match_and_execute_impl(cmds...);
}

int _try_to_match_and_execute()
{
    constexpr auto N_cmds = std::tuple_size_v<decltype(commands)>;

    if (std::string_view(argv[0]) == std::string_view("help"))
    {
        auto help = commands::Help<Config>{};
        return std::apply([&]<typename ... Cmds>(Cmds&& ... cmds)
        {
            return help.main(cmds...);
        }, commands);
    }
    else if constexpr (N_cmds == 0) return 127; // avoid impl if no args
    else return std::apply([this]<typename ... Cmds>(Cmds&& ... cmds)
    {
        return _try_to_match_and_execute_impl(cmds...);
    }, commands);
}

// @/

### Default type alias

The main CLI implementation `_Cli` should be generic about what commands it
accepts, mainly to facilitate testing without depending on all commands.
However, we assume that in general most users will want to have all available
commands accessible. To save these users from having to write out every command
name when instantiating the CLI, a type alias is provided.

```c++
// @='cli default type alias'
template<typename Config, typename devs_t>
using Cli = _Cli<Config, devs_t, commands::List>;
// @/
```

### Details

```c++
// @+'cli implementation details'
bool _is_whitespace(char c)
{
    if (c == ' ' || c == '\t' || c == '\n') return true;
    else return false;
}

bool _new_arg() const
{
    return write_pos == 0 || buffer[write_pos-1] == 0;
}

bool _overflow() const
{
    return argc == MAX_ARGS || write_pos == BUFFER_SIZE;
}

void _prompt()
{
    log.print("> ");
}

void _reset()
{
    argc = 0;
    write_pos = 0;
    _prompt();
}

void _complain_about_command_failure(int retcode)
{} // TODO
// @/

### Summary

```c++
// @#'cli.hpp'
#pragma once
#include <memory>
#include <tuple>
#include <string_view>

@{commands headers}

namespace sygaldry { namespace bindings::cli
{

template<typename Config, typename devs_t, template<typename> typename ... Commands>
struct _Cli
{
    [[no_unique_address]] typename Config::basic_logger_type log;
    devs_t devices;
    std::tuple<Commands<Config>...> commands{};

    _Cli(devs_t devs, const char * extra_boot_message = "") : devices{devs}
    {
        log.println("CLI enabled. Write `help` for a list of available commands.");
        if (extra_boot_message[0] != '\0') log.println(extra_boot_message);
        _prompt();
    }

    @{cli buffers}

    @{cli implementation details}

    void process(char c)
    {
        @{cli process}
    }
};

@{cli default type alias}

} }
// @/
```

# First Commands: `list` and `help`

Recalling our earlier discussion of the basic functionality we require, two
commands, `list` and `help` stand out as particularly simple, since they don't
need to actually interact much with the devices.

## List Command

The list command should output a new-line separated list of device names:

```c++
// @+'tests'
TEST_CASE("List command outputs", "[cli][commands][list]")
{
    int argc = 1;
    char * arg = (char *)"list";
    char ** argv = &arg;

    List<Config> command;

    auto devices = std::make_tuple(Device1{}, Device2{});
    auto retcode = command.main(argc, argv, devices);

    REQUIRE(command.log.put.ss.str() == string("test-device-1\ntest-device-2\n"));
    REQUIRE(retcode == 0);
}
// @/
```

Notice that we expect the device names to be converted to lower-kebab-case,
since this is arguably the most idiomatic spelling for a CLI context, and
easier to parse than a natural spelling with spaces.

Since device names are `consteval`, we can generate the whole expected output
at compile time. However, doing so is noticeably more complicated than merely
printing the correct output at runtime, and also imposes an increased program
size to statically store the generated strings, which needlessly duplicates the
names of devices. Instead, we'll iterate over the device types using a fold
expression and print each one's name using the injected logger.

```c++
// @#'commands/list.hpp'
#pragma once

#include "utilities/metadata/names/names.hpp"

namespace sygaldry::bindings::cli::commands
{

template<typename Config>
struct List
{
    static consteval auto name() { return "list"; }
    static consteval auto usage() { return ""; }
    static consteval auto description() { return "List the devices available to interact with through the CLI"; }

    [[no_unique_address]] typename Config::basic_logger_type log;

    template<typename... Devices>
    int main(int argc, char** argv, std::tuple<Devices...>&)
    {
        using sygaldry::utilities::metadata::names::lower_kebab_case_v;
        ( log.println(lower_kebab_case_v<Devices>), ... );
        return 0;
    }
};

}
// @/

// @+'commands headers'
#include "commands/list.hpp"
// @/
```

## Help Command

The help command is a bit unusual, since it actually doesn't care about
devices, but rather commands. It should print each command's name, usage, and a
brief description. The name is easy enough, as is the description, since it's
reasonable to expect the command to provide both of these considering there's
no reasonable way to deduce them. It would be ideal if the usage text could be
derived by reflecting on the command, but enabling this would require us to
make assumptions about the way commands are shaped, since it's not possible to
deduce anything from the signature `int main(argc, argc, devices)`. For now,
we'll take the easiest route and require commands to provide their usage text
if the command takes arguments.

```c++
// @+'test commands'
struct Command1 {
    static consteval auto name() { return "test-command-1"; }
    static consteval auto usage() { return "foo bar"; }
    static consteval auto description() { return "Description 1"; }
};

struct Command2 {
    static consteval auto name() { return "test-command-2"; }
    // no arguments, no usage text
    static consteval auto description() { return "Description 2"; }
};
// @/

// @+'tests'
TEST_CASE("Help command", "[cli][commands][help]")
{
    Help<Config> command;

    auto retcode = command.main(Command1{}, Command2{});

    REQUIRE(command.log.put.ss.str() == string("test-command-1 foo bar\n    Description 1\ntest-command-2\n    Description 2\nhelp\n    Describe the available commands and their usage\n"));
    REQUIRE(retcode == 0);
}
// @/
```

Since the help command is a special case, which operates over commands instead
of devices, we allow it to buck the pattern established with the list command
and have a `main` method with no arguments.

```c++
// @#'commands/help.hpp'
#pragma once

namespace sygaldry { namespace bindings::cli::commands
{
template<typename Config>
struct Help
{
    static consteval auto name() { return "help"; }
    static consteval auto usage() { return ""; }
    static consteval auto description() { return "Describe the available commands and their usage"; }

    [[no_unique_address]] typename Config::basic_logger_type log;

    template<typename Cmd>
    void _print(Cmd&& command)
    {
        if constexpr (requires {command.usage();})
            log.println(command.name(), " ", command.usage());
        else
            log.println(command.name());
        log.println("    ", command.description());
    }

    template<typename ... Commands>
    int main(Commands&& ... commands)
    {
        ( _print(commands), ... );
        log.println(name());
        log.println("    ", description());
        return 0;
    }
};
} }
// @/

// @+'commands headers'
#include "commands/help.hpp"
// @/
```

# Device Commands

## Describe

## Get

## Set

## Trigger

# Using the CLI

## Stdio App

For quick tests and experimentation, we would like to be able to run this as an
interactive command line application in the OS of our choice, allowing us to
run our devices in a simulated environment, feed them test inputs, and examine
their outputs. The same implementation should also be usable on any environment
the provides `getchar` and `putchar` from the C standard library.

```c++
// @#'cli_app.hpp'
#pragma once
#include "bindings/basic_logger/standard_logger.hpp"
#include "cli.hpp"
#include <stdio.h>
#include <cstdlib>
#include <memory>

struct Config
{
    using basic_logger_type = sygaldry::bindings::basic_logger::StandardLogger;
};

template<typename ... Devices>
struct CliApp
{
    using devs_tuple_t = std::tuple<Devices...>;
    using devs_t = std::shared_ptr<devs_tuple_t>;
    devs_t devices = std::make_shared<devs_tuple_t>();
    sygaldry::bindings::cli::Cli<Config, devs_t> cli{devices, "Type Ctrl-D to exit."};

    int main()
    {
        for (;;)
        {
            char c = getchar();
            if (c == EOF)
                std::exit(EXIT_SUCCESS);
            else
                cli.process(c);
        }
    }
};
// @/
```

The CLI class itself implements a fairly limited behavior.

```c++
// @#'cli_app_demo.cpp'
#include "cli_app.hpp"

struct Device1 {
    static consteval auto name() { return "Test Device 1"; }
};

struct Device2 {
    static consteval auto name() { return "Test Device 2"; }
};

int main()
{
    CliApp<Device1, Device2> app{};
    app.main();
}
// @/
```

# Summary

# Building Tests

```c++
// @#'tests.cpp'
#include <catch2/catch_test_macros.hpp>
#include "cli.hpp"
#include "bindings/basic_logger/test_logger.hpp"
#include <string>

using std::string;

using namespace sygaldry::bindings::cli::commands;
using namespace sygaldry::bindings::cli;

@{cli test wrapper}

@{test commands}

@{test devices}

@{test config class}

@{tests}
// @/
```

```cmake
# @#'CMakeLists.txt'
add_executable(cli-tests tests.cpp)
target_link_libraries(cli-tests PRIVATE Catch2::Catch2WithMain)
catch_discover_tests(cli-tests)

add_executable(cli-demo cli_app_demo.cpp)
# @/
```
