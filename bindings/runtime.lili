# Runtime

The runtime describes the expected behavior of the host platform of an
assemblage of components. The runtime must first call every component's `init`
method, if it has one. Then, in an endless loop, each component's main
subroutine must be called, in node-tree-order, except for components which are
parts in a subassembly with its own main subroutine.

Originally planned as further overloads of the the `init` and `activate`
functions in [the components concepts library](concepts/components.lili.md),
the runtime class below allows the plugins and throughpoints of components
having them to be automatically extracted by type from a component container
when calling the `init` and `activate` methods of components. The decision was
made to construct this as a class in order to ensure that the compiler would
have the best chance of computing the argument extraction at compile time.
It is a kind of ultimate binding that is meant to drive all other components,
including binding components.

```cpp
// @#'runtime.hpp'
#pragma once

#include "concepts/components.hpp"

namespace sygaldry {

template<typename Components>
struct Runtime
{
    static constinit Components components{};

    static void init()
    {
    }

    static void main()
    {
    }
};

}
```
