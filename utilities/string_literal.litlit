# String Literal

All endpoints are required to have a name. To facilitate setting this
conveniently, at compile time, we define a thin wrapper around a string literal
that allows us to pass string literals as template parameters. The way this
works is through class template argument deduction, and `_consteval`
construction from a (fully typed) string literal array. When an actual literal
(a `const char[N]` array, not a `const char *` that we're used to dealing with
after the array part decays to a pointer) is passed as parameter to a template
that takes a `string_literal` parameter, the compiler automatically deduces the
size parameter of the string literal. The literal is then copied at compile time
to the `string_literal`'s data array.

As well as being used to name endpoints and components, this helpful class is
leveraged extensively in the name manipulation library at `utilites/names.hpp`.

```c++
// @#'string_literal.hpp'
#pragma once
#include <cstddef>
#include "utilities/consteval.hpp"

namespace sygaldry::utilities
{
template<std::size_t N>
struct string_literal
{
    static _consteval auto size() {return N;}
    char data[N];
    _consteval string_literal(const char (&str)[N]) noexcept
    {
        for (std::size_t i = 0; i < N; ++i) data[i] = str[i];
    }
    operator const char *() {return data;}
};
}
// @/

// @#'tests/string_literal/tests.cpp'
#include <string_view>
#include <catch2/catch_test_macros.hpp>
#include "utilities/string_literal.hpp"

using namespace sygaldry::utilities;
using std::string_view;

template<string_literal str>
_consteval auto name() {return string_view{str.data};}

TEST_CASE("String literal", "[utilities][string_literal]")
{
    REQUIRE(string_view(string_literal{"Hello world"}.data) == "Hello world");
    REQUIRE(name<"test">() == "test");
}
// @/
```

```cmake
# @#'tests/string_literal/CMakeLists.txt'
add_executable(string-literal-tests tests.cpp)
target_link_libraries(string-literal-tests PRIVATE Catch2::Catch2WithMain)
catch_discover_tests(string-literal-tests)
# @/
```
