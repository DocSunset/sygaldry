# The Build System

# CMake

CMake is currently used as the default project build system, currently mainly
employed to build test code. However, certain hardware platforms require (or
heavily incentivise) use of particular build systems; these are used where
appropriate.

# Literate Sources

Literate programming is employed throuhgout the project. The literate sources
are considered authoritative, and are used to generate most other source files,
including CMakeLists.txt files. The following line of shell script can
regenerate all machine sources from the litlit literate source files.
For each `.litlit` file found in the repository with `find`, the script
finds the first file generated by that literate source, and if the source
is more recently modified than the generated file, reruns `litlit` to
regenerate all files derived from that literate source. GNU `parallel` is
used to perform this subroutine for all literate sources.
Run this script from the root of the repository:

```sh
# @#'sh/litlit.sh'
# generate machine sources from literate source code
find -iname '*.litlit' | parallel '
    cd {//}
    generated="$(grep -m 1 -h -r -I "@@#" {/} | head -n 1 | sed 's/^.*@#.//' | sed 's/.$//')"
    [ {/} -nt "$generated" ] &&
    {
        echo {} "newer than $generated, running litlit..."
        litlit {/}
    }
'
find -iname '*.litlit' | parallel '
    cd {//}
    [ -e "README.md" ] || ln -s -T {/} README.md
'
# @/
```

Where there is code to compile, or anything remotely interesting,
CMakeLists.txt files are generated from literate source code in the same
directory. When the CMakeLists.txt is trivially simple (e.g. simply including
subdirectories), it is hardcoded without comment.

# Building

A simple shell script is provided to run the compiler and test suite, useful
for development. Run it from the root of the project passing the name of the
build directory as first argument.

```sh
# @#'sh/run.sh'
[ -d "$1" ] ||
{
    echo "No build directory called $1.
Run e.g. `cmake -B $1 -S .` from the root of the repository to generate one."
    exit 2
}
./sh/litlit.sh
cmake --build "$1" &&
{
    ctest --test-dir "$1" ||
        ctest --test-dir "$1" --rerun-failed --output-on-failure
}
# @/
```

If `entr` is available on your system, the following script watches literate
sources and automatically executes `run.sh` when they have changed.

```sh
# @#'sh/rund.sh'
find -iname '*.litlit' | entr ./sh/run.sh $@
# @/
```

# Testing Framework

Catch2 is used for unit testing. 

```cmake
# @='Fetch Catch2'
Include(FetchContent)

FetchContent_Declare(
  Catch2
  GIT_REPOSITORY https://github.com/catchorg/Catch2.git
  GIT_TAG        v3.3.2 # or a later release
)

FetchContent_MakeAvailable(Catch2)
# @/

# @='Include automatic test registration'
list(APPEND CMAKE_MODULE_PATH ${catch2_SOURCE_DIR}/extras)
include(CTest)
include(Catch)
# @/
```

See [the Catch2 CMake integration documentation](https://github.com/catchorg/Catch2/blob/devel/docs/cmake-integration.md#top) for more detail.

# Language Standard

We require C++20 without extensions.

```cmake
# @='Set language standard'
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED On)
set(CMAKE_CXX_EXTENSIONS Off)
# @/
```

# Libraries

```cmake
# @='Include libraries'
include_directories(dependencies/pfr/include)
include_directories(./)
set(AVENDISH_INCLUDE_SOURCE_ONLY ON)
include_directories(dependencies/avendish/include/)
# @/
```

# Summary

```cmake
# @#'CMakeLists.txt'
cmake_minimum_required(VERSION 3.26)
project(Sygaldry)

@{Set language standard}

@{Fetch Catch2}

@{Include automatic test registration}

@{Include libraries}

add_subdirectory(utilities)
add_subdirectory(components)
add_subdirectory(bindings)
add_subdirectory(instruments)
# @/
```
